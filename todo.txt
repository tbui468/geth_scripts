************************Read************************
Read Bitcoin and Cryptocurrency technologies - foundation
Messari BlockChain report - business side of things
Reread Mastering Bitcoin - technical details/foundation
Reread Mastering Ethereum - technical details/foundation
Vitalik Buterin blog

Note: Mining can be used for private networks, but mainnet
    requires a consensus client since ethereum switch to proof-of-stake
    Geth and a consensus client (such as Prysm, a Go POS implementation) and maintain ethereum blockchain
    Back in the day only an execution client was necessary, but the switch now requires a different consensus mechanism
    Consider running Prysm alongside Geth for the private network

**********************Foundations*****************************
Finish reading Bitcoin and Cryptocurrency technologies
Watch video on building a mini-cryptocurrency in Ruby
Without referring to video, build a mini-cryptocurrency in Python
    try using hash functions/dsa from eth_utils so that we can skip the geth signers
Ethereum in 25 minutes video
Mastering Ethereum Book
Build a mini-ethereum blockchain/virtual machine in python
Remake mini-ethereum to use proof-of-stake

***********************Structured Smart Contract Courses********************************
CryptoZombies
    pw: catdoglion
Ethernauts

**************************Ballot Contract*******************************
!!!Just start the miners in the python script itself

Make more signers - 2 miners and 8 non-mining nodes

Event for when user votes successfully
Time to end vote and reveal results - should be set in constructor
    If there's a tie between 2 or more proposals, then owner can cast a vote
    Only allow owner vote if there's a tie at the end, and the vote must be on one of the tied proposals
Voters can delegate vote to another account (that must also have voting rights already)
    event for when delegation is successful
Check for other features in Ballot contract
Test theirs and test mine

Look into async and await in python to do the json-rpc requests to the blockchain
    using a while loop to check for events is quite hacky

Interact with more complex contract
    Ballot Contract - write python tests for Ballot functionality

***********************Ideas****************************
KickStarter DAO
    Send money to account
    if amount reach, project is funded
    else if time limit reached without full funding, sent money is refunded
    Would still need a third-party to settle disputes (eg, project spent all money without delivering promise)

Staking-as-a-Service DAO
    Stakers send ether to stake pool described by smart contract
    Owner of server running consensus client takes a small cut of profits, remaining sent to stakers

Uniswap Defi
    Implement uniswap paper(s)

******************Interact with Ballot Contract using Metamask**********
May need to set up basic javascript frontend for this

******************Use eth_utils to manually sign transactions***********
Bypass the geth accounts stuff, and understand what metamask is doing behind the scenes
    probably a good idea to undestand (at least understand usage) of one of the cryptographic primitives

    digital signatures in ethereum - does it use ECDSA?

******************Set up private proof-of-stake network******************
Use Geth and Prysm

****************************Oracles**************************************

******************************Defi**************************************

****************************Test Nets***********************************
